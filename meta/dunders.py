    _ALL_METAD_3141592 = {
        '__bool__',
        '__bytes__',
        '__str__',
        '__format__',
        '__len__',
        '__length_hint__',
        '__call__',
        '__getitem__',
        '__missing__',
        '__setitem__',
        '__delitem__',
        '__iter__',
        '__reversed__',
        '__contains__',
        '__enter__',
        '__exit__',
        '__aenter__',
        '__aexit__',
        '__await__',
        '__aiter__',
        '__anext__',
        '__add__',
        '__sub__',
        '__mul__',
        '__matmul__',
        '__truediv__',
        '__floordiv__',
        '__mod__',
        '__divmod__',
        '__pow__',
        '__lshift__',
        '__rshift__',
        '__and__',
        '__xor__',
        '__or__',
        '__radd__',
        '__rsub__',
        '__rmul__',
        '__rmatmul__',
        '__rtruediv__',
        '__rfloordiv__',
        '__rmod__',
        '__rdivmod__',
        '__rpow__',
        '__rlshift__',
        '__rrshift__',
        '__rand__',
        '__rxor__',
        '__ror__',
        '__iadd__',
        '__isub__',
        '__imul__',
        '__imatmul__',
        '__itruediv__',
        '__ifloordiv__',
        '__imod__',
        '__ipow__',
        '__ilshift__',
        '__irshift__',
        '__iand__',
        '__ixor__',
        '__ior__',
        '__neg__',
        '__pos__',
        '__abs__',
        '__invert__',
        '__complex__',
        '__int__',
        '__float__',
        '__round__',
        '__index__',
    }

    def __bool__(self):
        ''' Wrap __bool__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return bool(self._proxy_3141592)
        
    def __bytes__(self):
        ''' Wrap __bytes__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return bytes(self._proxy_3141592)
        
    def __str__(self):
        ''' Wrap __str__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return str(self._proxy_3141592)
        
    def __format__(self, *args, **kwargs):
        ''' Wrap __format__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return format(self._proxy_3141592, *args, **kwargs)
        
    def __len__(self):
        ''' Wrap __len__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return len(self._proxy_3141592)
        
    def __length_hint__(self):
        ''' Wrap __length_hint__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return operator.length_hint(self._proxy_3141592)
        
    def __call__(self, *args, **kwargs):
        ''' Wrap __call__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592(*args, **kwargs)
        
    def __getitem__(self, key):
        ''' Wrap __getitem__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592[key]
        
    def __missing__(self, key):
        ''' Wrap __missing__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__missing__(key)
        
    def __setitem__(self, key, value):
        ''' Wrap __setitem__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        self._proxy_3141592[key] = value
        
    def __delitem__(self, key):
        ''' Wrap __delitem__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        del self._proxy_3141592[key]
        
    def __iter__(self):
        ''' Wrap __iter__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return iter(self._proxy_3141592)
        
    def __reversed__(self):
        ''' Wrap __reversed__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return reversed(self._proxy_3141592)
        
    def __contains__(self, item):
        ''' Wrap __contains__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return item in self._proxy_3141592
        
    def __enter__(self):
        ''' Wrap __enter__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__enter__()
        
    def __exit__(self, *args, **kwargs):
        ''' Wrap __exit__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__exit__(*args, **kwargs)
        
    def __aenter__(self):
        ''' Wrap __aenter__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__aenter__()
        
    def __aexit__(self, *args, **kwargs):
        ''' Wrap __aexit__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__aexit__(*args, **kwargs)
        
    def __await__(self):
        ''' Wrap __await__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__await__()
        
    def __aiter__(self):
        ''' Wrap __aiter__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__aiter__()
        
    def __anext__(self):
        ''' Wrap __anext__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return self._proxy_3141592.__anext__()
        
    def __add__(self, other):
        ''' Wrap __add__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 + other._proxy_3141592
        
        else:
            return self._proxy_3141592 + other
            
    def __sub__(self, other):
        ''' Wrap __sub__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 - other._proxy_3141592
        
        else:
            return self._proxy_3141592 - other
            
    def __mul__(self, other):
        ''' Wrap __mul__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 * other._proxy_3141592
        
        else:
            return self._proxy_3141592 * other
            
    def __matmul__(self, other):
        ''' Wrap __matmul__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 @ other._proxy_3141592
        
        else:
            return self._proxy_3141592 @ other
            
    def __truediv__(self, other):
        ''' Wrap __truediv__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 / other._proxy_3141592
        
        else:
            return self._proxy_3141592 / other
            
    def __floordiv__(self, other):
        ''' Wrap __floordiv__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 // other._proxy_3141592
        
        else:
            return self._proxy_3141592 // other
            
    def __mod__(self, other):
        ''' Wrap __mod__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 % other._proxy_3141592
        
        else:
            return self._proxy_3141592 % other
            
    def __divmod__(self, other, *args, **kwargs):
        ''' Wrap __divmod__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return divmod(
                self._proxy_3141592, 
                other._proxy_3141592,
                *args, 
                **kwargs
            )
        
        else:
            return divmod(
                self._proxy_3141592, 
                other,
                *args, 
                **kwargs
            )
            
    def __pow__(self, other, *args, **kwargs):
        ''' Wrap __pow__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return pow(
                self._proxy_3141592, 
                other._proxy_3141592,
                *args, 
                **kwargs
            )
        
        else:
            return pow(
                self._proxy_3141592, 
                other,
                *args, 
                **kwargs
            )
            
    def __lshift__(self, other):
        ''' Wrap __lshift__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 << other._proxy_3141592
        
        else:
            return self._proxy_3141592 << other
            
    def __rshift__(self, other):
        ''' Wrap __rshift__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 >> other._proxy_3141592
        
        else:
            return self._proxy_3141592 >> other
            
    def __and__(self, other):
        ''' Wrap __and__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 & other._proxy_3141592
        
        else:
            return self._proxy_3141592 & other
            
    def __xor__(self, other):
        ''' Wrap __xor__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 ^ other._proxy_3141592
        
        else:
            return self._proxy_3141592 ^ other
            
    def __or__(self, other):
        ''' Wrap __or__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            return self._proxy_3141592 | other._proxy_3141592
        
        else:
            return self._proxy_3141592 | other
            
    def __radd__(self, other):
        ''' Wrap __radd__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 + self._proxy_3141592
        
        else:
            return other + self._proxy_3141592
            
    def __rsub__(self, other):
        ''' Wrap __rsub__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 - self._proxy_3141592
        
        else:
            return other - self._proxy_3141592
            
    def __rmul__(self, other):
        ''' Wrap __rmul__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 * self._proxy_3141592
        
        else:
            return other * self._proxy_3141592
            
    def __rmatmul__(self, other):
        ''' Wrap __rmatmul__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 @ self._proxy_3141592
        
        else:
            return other @ self._proxy_3141592
            
    def __rtruediv__(self, other):
        ''' Wrap __rtruediv__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 / self._proxy_3141592
        
        else:
            return other / self._proxy_3141592
            
    def __rfloordiv__(self, other):
        ''' Wrap __rfloordiv__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 // self._proxy_3141592
        
        else:
            return other // self._proxy_3141592
            
    def __rmod__(self, other):
        ''' Wrap __rmod__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 % self._proxy_3141592
        
        else:
            return other % self._proxy_3141592
            
    def __rdivmod__(self, other):
        ''' Wrap __rdivmod__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return divmod(other._proxy_3141592, self._proxy_3141592)
        
        else:
            return divmod(other, self._proxy_3141592)
            
    def __rpow__(self, other):
        ''' Wrap __rpow__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return pow(other._proxy_3141592, self._proxy_3141592)
        
        else:
            return pow(other, self._proxy_3141592)
            
    def __rlshift__(self, other):
        ''' Wrap __rlshift__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 << self._proxy_3141592
        
        else:
            return other << self._proxy_3141592
            
    def __rrshift__(self, other):
        ''' Wrap __rrshift__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 >> self._proxy_3141592
        
        else:
            return other >> self._proxy_3141592
            
    def __rand__(self, other):
        ''' Wrap __rand__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 & self._proxy_3141592
        
        else:
            return other & self._proxy_3141592
            
    def __rxor__(self, other):
        ''' Wrap __rxor__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 ^ self._proxy_3141592
        
        else:
            return other ^ self._proxy_3141592
            
    def __ror__(self, other):
        ''' Wrap __ror__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no reversed operations are passed *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            return other._proxy_3141592 | self._proxy_3141592
        
        else:
            return other | self._proxy_3141592
            
    def __iadd__(self, other):
        ''' Wrap __iadd__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 += other._proxy_3141592
        
        else:
            self._proxy_3141592 += other
            
        return self
            
    def __isub__(self, other):
        ''' Wrap __isub__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 -= other._proxy_3141592
        
        else:
            self._proxy_3141592 -= other
            
        return self
            
    def __imul__(self, other):
        ''' Wrap __imul__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 *= other._proxy_3141592
        
        else:
            self._proxy_3141592 *= other
            
        return self
            
    def __imatmul__(self, other):
        ''' Wrap __imatmul__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 @= other._proxy_3141592
        
        else:
            self._proxy_3141592 @= other
            
        return self
            
    def __itruediv__(self, other):
        ''' Wrap __itruediv__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 /= other._proxy_3141592
        
        else:
            self._proxy_3141592 /= other
            
        return self
            
    def __ifloordiv__(self, other):
        ''' Wrap __ifloordiv__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 //= other._proxy_3141592
        
        else:
            self._proxy_3141592 //= other
            
        return self
            
    def __imod__(self, other):
        ''' Wrap __imod__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 %= other._proxy_3141592
        
        else:
            self._proxy_3141592 %= other
            
        return self
            
    def __ipow__(self, other):
        ''' Wrap __ipow__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 **= other._proxy_3141592
        
        else:
            self._proxy_3141592 **= other
            
        return self
            
    def __ilshift__(self, other):
        ''' Wrap __ilshift__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 <<= other._proxy_3141592
        
        else:
            self._proxy_3141592 <<= other
            
        return self
            
    def __irshift__(self, other):
        ''' Wrap __irshift__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 >>= other._proxy_3141592
        
        else:
            self._proxy_3141592 >>= other
            
        return self
            
    def __iand__(self, other):
        ''' Wrap __iand__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 &= other._proxy_3141592
        
        else:
            self._proxy_3141592 &= other
            
        return self
            
    def __ixor__(self, other):
        ''' Wrap __ixor__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 ^= other._proxy_3141592
        
        else:
            self._proxy_3141592 ^= other
            
        return self
            
    def __ior__(self, other):
        ''' Wrap __ior__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        # Note that no incremental operations are PASSED *args or **kwargs
        
        # We could do this to *any* HGXObjBase, but I don't like the idea of
        # forcibly upgrading those, since they might do, for example, some
        # different comparison operation or something. This seems like a 
        # much safer bet.
        if isinstance(other, NoopProxy):
            # Other proxies are very likely to fail, since the reveresed call 
            # would normally have already been called -- but try them anyways.
            self._proxy_3141592 |= other._proxy_3141592
        
        else:
            self._proxy_3141592 |= other
            
        return self
            
    def __neg__(self):
        ''' Wrap __neg__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return -(self._proxy_3141592)
            
    def __pos__(self):
        ''' Wrap __pos__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return +(self._proxy_3141592)
            
    def __abs__(self):
        ''' Wrap __abs__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return abs(self._proxy_3141592)
            
    def __invert__(self):
        ''' Wrap __invert__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return ~(self._proxy_3141592)
            
    def __complex__(self):
        ''' Wrap __complex__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return complex(self._proxy_3141592)
            
    def __int__(self):
        ''' Wrap __int__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return int(self._proxy_3141592)
            
    def __float__(self):
        ''' Wrap __float__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return float(self._proxy_3141592)
            
    def __round__(self):
        ''' Wrap __round__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return round(self._proxy_3141592)
            
    def __index__(self):
        ''' Wrap __index__ to pass into the _proxy object.
        
        This method was (partially?) programmatically generated by a 
        purpose-built script.
        '''
        return operator.index(self._proxy_3141592)
            
